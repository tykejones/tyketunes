{"ast":null,"code":"const clientId = 'a5d4e96d6ca846b7972ef0d3050e18c5';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then;\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/marshalljones/Desktop/ReactProjects/tyketunes/tyketunes/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlayList","trackUris","length","userId"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AAEZC,EAAAA,cAAc,GAAG;AACb,QAAIF,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAHY,CAIb;;;AACA,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACpCR,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFoC,CAGpC;;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOb,WAAP;AACH,KAPD,MAOO;AACH,YAAMc,SAAS,8DAAuDhB,QAAvD,4EAAiIC,WAAjI,CAAf;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AAGN;AACD,GAvBW;;AAwBZC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,0DAAmDD,IAAnD,GACR;AAAEE,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,mBAAYnB,WAAZ;AADN;AAAX,KADQ,CAAL,CAIAoB,IAJA,CAIKC,QAAQ,IAAI;AACpB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KANM,EAMJF,IANI,CAMCG,YAAY,IAAI;AACpB,UAAI,CAACA,YAAY,CAACC,MAAlB,EAAyB;AACrB,eAAO,EAAP;AACH;;AACG,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;AAC5CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADkC;AAE5CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAFgC;AAG5CC,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgBD,IAHoB;AAI5CE,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYF,IAJyB;AAK5CG,QAAAA,GAAG,EAAEL,KAAK,CAACK;AALiC,OAAL,CAAnC,CAAP;AAQP,KAlBM,CAAP;AAmBH,GA7CW;;AA+CZC,EAAAA,YAAY,CAACJ,IAAD,EAAOK,SAAP,EAAkB;AAC1B,QAAI,CAACL,IAAD,IAAS,CAACK,SAAS,CAACC,MAAxB,EAAgC;AAC5B;AACH;;AAED,UAAMnC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMgB,OAAO,GAAG;AAACC,MAAAA,aAAa,mBAAYnB,WAAZ;AAAd,KAAhB;AACA,QAAIoC,MAAJ;AAEA,WAAOnB,KAAK,CAAC,+BAAD,EAAkC;AAACC,MAAAA,OAAO,EAAEA;AAAV,KAAlC,CAAL,CACOE,IADP,CACYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADxB,EAEOF,IAFd;AAIH;;AA5DW,CAAhB;AAkEA,eAAenB,OAAf","sourcesContent":["const clientId = 'a5d4e96d6ca846b7972ef0d3050e18c5';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n  \n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        \n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //This clears the parameters, allowing us to grab a new access token when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n\n        \n     }\n    },\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n            { headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n            }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks){\n                return [];\n            }\n                return jsonResponse.tracks.items.map(track => ({\n                   id: track.id,\n                   name: track.name,\n                   artist: track.artist[0].name,\n                   album: track.album.name,\n                   uri: track.uri\n                }));\n            \n        });\n    },\n    \n    savePlayList(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n        \n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`}\n        let userId;\n        \n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n                    ).then(response => response.json()\n                    ).then \n        \n    }\n    \n    \n}\n    \n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}